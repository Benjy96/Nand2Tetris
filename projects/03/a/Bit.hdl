// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/Bit.hdl

/**
 * 1-bit register:
 * If load[t] == 1 then out[t+1] = in[t]
 *                 else out does not change (out[t+1] = out[t])
 */

CHIP Bit {
    IN in, load;
    OUT out;

    PARTS:
    // Put your code here:
	Mux(a=DFFOut, b=in, sel=load, out=muxOut);
	DFF(in=muxOut, out=DFFOut, out=out);


/**

It works because it can either take the input from its previous output, or a new one.

- The clock in DFF means it takes a cycle for the input to propagate to the output.
- Load selects between what we already have and some new data.
- When you load in a new bit, it takes a tick to get to the output, and it's then
  one of the new inputs.

Data flip-flop itself could be quite simple:
	Only change output when clock = 1.
		When clock = 1, out = in.
		Clock is an oscillator.

*/


}
